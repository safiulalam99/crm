
SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

CREATE EXTENSION IF NOT EXISTS "pgsodium" WITH SCHEMA "pgsodium";

CREATE EXTENSION IF NOT EXISTS "insert_username" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "pg_graphql" WITH SCHEMA "graphql";

CREATE EXTENSION IF NOT EXISTS "pg_stat_statements" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "pgcrypto" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "pgjwt" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "supabase_vault" WITH SCHEMA "vault";

CREATE EXTENSION IF NOT EXISTS "uuid-ossp" WITH SCHEMA "extensions";

CREATE OR REPLACE FUNCTION "public"."create_user_on_signup"() RETURNS "trigger"
    LANGUAGE "plpgsql" SECURITY DEFINER
    AS $$  BEGIN
    INSERT INTO public.user (id)
    VALUES (NEW.id);
    RETURN NEW;
  END;$$;

ALTER FUNCTION "public"."create_user_on_signup"() OWNER TO "postgres";

SET default_tablespace = '';

SET default_table_access_method = "heap";

CREATE TABLE IF NOT EXISTS "public"."bank_details" (
    "id" integer NOT NULL,
    "iban" character varying(50) NOT NULL,
    "bank" character varying(255) NOT NULL,
    "bic" character varying(50) NOT NULL,
    "seller_id" integer,
    "user_id" "uuid"
);

ALTER TABLE "public"."bank_details" OWNER TO "postgres";

CREATE SEQUENCE IF NOT EXISTS "public"."bank_details_id_seq"
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;

ALTER TABLE "public"."bank_details_id_seq" OWNER TO "postgres";

ALTER SEQUENCE "public"."bank_details_id_seq" OWNED BY "public"."bank_details"."id";

CREATE TABLE IF NOT EXISTS "public"."buyers" (
    "id" integer NOT NULL,
    "name" character varying(255) NOT NULL,
    "address" character varying(255) NOT NULL,
    "country" character varying(50) NOT NULL,
    "vatnumber" character varying(50),
    "contractnumber" character varying(50),
    "contactperson" character varying(255),
    "paymentterm" character varying(50),
    "deliveryterm" character varying(50),
    "registrationnumber" character varying(50),
    "currency_id" integer DEFAULT 1,
    "contactpersonrole" "text" DEFAULT ''::"text",
    "user_id" "uuid"
);

ALTER TABLE "public"."buyers" OWNER TO "postgres";

CREATE SEQUENCE IF NOT EXISTS "public"."buyers_id_seq"
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;

ALTER TABLE "public"."buyers_id_seq" OWNER TO "postgres";

ALTER SEQUENCE "public"."buyers_id_seq" OWNED BY "public"."buyers"."id";

CREATE TABLE IF NOT EXISTS "public"."currencies" (
    "id" integer NOT NULL,
    "name" character varying(50) NOT NULL,
    "symbol" character varying(10) NOT NULL
);

ALTER TABLE "public"."currencies" OWNER TO "postgres";

CREATE SEQUENCE IF NOT EXISTS "public"."currencies_id_seq"
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;

ALTER TABLE "public"."currencies_id_seq" OWNER TO "postgres";

ALTER SEQUENCE "public"."currencies_id_seq" OWNED BY "public"."currencies"."id";

CREATE TABLE IF NOT EXISTS "public"."invoice_design" (
    "id" integer NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "logo" "text",
    "slogan" "text" DEFAULT ''::"text",
    "footer" "text" DEFAULT ''::"text",
    "color" "text",
    "user_id" "uuid"
);

ALTER TABLE "public"."invoice_design" OWNER TO "postgres";

ALTER TABLE "public"."invoice_design" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."invoice_design_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."invoice_products" (
    "id" integer NOT NULL,
    "invoicenumber" character varying(50),
    "product_id" integer,
    "units" integer NOT NULL,
    "unitprice" numeric(10,2) NOT NULL,
    "unitvat" numeric(5,2) NOT NULL,
    "unittotal" numeric(10,2) NOT NULL,
    "productlot" "text" DEFAULT ''::"text",
    "languageversion" "text" DEFAULT ''::"text",
    "user_id" "uuid"
);

ALTER TABLE "public"."invoice_products" OWNER TO "postgres";

CREATE SEQUENCE IF NOT EXISTS "public"."invoice_products_id_seq"
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;

ALTER TABLE "public"."invoice_products_id_seq" OWNER TO "postgres";

ALTER SEQUENCE "public"."invoice_products_id_seq" OWNED BY "public"."invoice_products"."id";

CREATE TABLE IF NOT EXISTS "public"."invoices" (
    "invoicenumber" character varying(50) NOT NULL,
    "vattype" character varying(50),
    "date" "date" NOT NULL,
    "deliveryterm" character varying(50),
    "deliverydate" "date",
    "paymentsplit" character varying(255),
    "subtotal" numeric(10,2),
    "total" numeric(10,2),
    "taxrate" numeric(5,2),
    "totaltax" numeric(10,2),
    "totaldiscount" numeric(10,2),
    "discountrate" numeric(5,2),
    "numberinwords" "text",
    "comments" "text",
    "paymentstatus" character varying(50),
    "buyer_id" integer,
    "seller_id" integer,
    "currency_id" integer DEFAULT 1,
    "time_stamp" timestamp with time zone DEFAULT ("now"() AT TIME ZONE 'utc'::"text"),
    "user_id" "uuid"
);

ALTER TABLE "public"."invoices" OWNER TO "postgres";

CREATE TABLE IF NOT EXISTS "public"."products" (
    "id" integer NOT NULL,
    "name" character varying(255) NOT NULL,
    "description" "text",
    "category" character varying(255),
    "price" numeric(10,2) NOT NULL,
    "time_stamp" timestamp with time zone DEFAULT ("now"() AT TIME ZONE 'utc'::"text"),
    "defaultquantity" numeric DEFAULT '0'::numeric,
    "maxquantity" numeric DEFAULT '0'::numeric,
    "imageurl" "text",
    "status" "text" DEFAULT 'active'::"text",
    "user_id" "uuid",
    CONSTRAINT "products_status_check" CHECK ((("status" = 'active'::"text") OR ("status" = 'archived'::"text") OR ("status" = 'deleted'::"text")))
);

ALTER TABLE "public"."products" OWNER TO "postgres";

CREATE SEQUENCE IF NOT EXISTS "public"."products_id_seq"
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;

ALTER TABLE "public"."products_id_seq" OWNER TO "postgres";

ALTER SEQUENCE "public"."products_id_seq" OWNED BY "public"."products"."id";

CREATE TABLE IF NOT EXISTS "public"."sellers" (
    "id" integer NOT NULL,
    "name" character varying(255) NOT NULL,
    "address" character varying(255) NOT NULL,
    "vatnumber" character varying(50),
    "displayname" character varying(255),
    "managingdirector" character varying(255),
    "country" character varying(50),
    "user_id" "uuid"
);

ALTER TABLE "public"."sellers" OWNER TO "postgres";

CREATE SEQUENCE IF NOT EXISTS "public"."sellers_id_seq"
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;

ALTER TABLE "public"."sellers_id_seq" OWNER TO "postgres";

ALTER SEQUENCE "public"."sellers_id_seq" OWNED BY "public"."sellers"."id";

CREATE TABLE IF NOT EXISTS "public"."user" (
    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "role" "text" DEFAULT 'user'::"text"
);

ALTER TABLE "public"."user" OWNER TO "postgres";

ALTER TABLE ONLY "public"."bank_details" ALTER COLUMN "id" SET DEFAULT "nextval"('"public"."bank_details_id_seq"'::"regclass");

ALTER TABLE ONLY "public"."buyers" ALTER COLUMN "id" SET DEFAULT "nextval"('"public"."buyers_id_seq"'::"regclass");

ALTER TABLE ONLY "public"."currencies" ALTER COLUMN "id" SET DEFAULT "nextval"('"public"."currencies_id_seq"'::"regclass");

ALTER TABLE ONLY "public"."invoice_products" ALTER COLUMN "id" SET DEFAULT "nextval"('"public"."invoice_products_id_seq"'::"regclass");

ALTER TABLE ONLY "public"."products" ALTER COLUMN "id" SET DEFAULT "nextval"('"public"."products_id_seq"'::"regclass");

ALTER TABLE ONLY "public"."sellers" ALTER COLUMN "id" SET DEFAULT "nextval"('"public"."sellers_id_seq"'::"regclass");

ALTER TABLE ONLY "public"."bank_details"
    ADD CONSTRAINT "bank_details_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."buyers"
    ADD CONSTRAINT "buyers_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."currencies"
    ADD CONSTRAINT "currencies_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."invoice_products"
    ADD CONSTRAINT "invoice_products_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."invoices"
    ADD CONSTRAINT "invoices_pkey" PRIMARY KEY ("invoicenumber");

ALTER TABLE ONLY "public"."products"
    ADD CONSTRAINT "products_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."sellers"
    ADD CONSTRAINT "sellers_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."user"
    ADD CONSTRAINT "user_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."bank_details"
    ADD CONSTRAINT "bank_details_seller_id_fkey" FOREIGN KEY ("seller_id") REFERENCES "public"."sellers"("id");

ALTER TABLE ONLY "public"."bank_details"
    ADD CONSTRAINT "bank_details_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "public"."user"("id") ON UPDATE CASCADE;

ALTER TABLE ONLY "public"."buyers"
    ADD CONSTRAINT "buyers_currency_id_fkey" FOREIGN KEY ("currency_id") REFERENCES "public"."currencies"("id");

ALTER TABLE ONLY "public"."buyers"
    ADD CONSTRAINT "buyers_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "public"."user"("id") ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE ONLY "public"."invoice_design"
    ADD CONSTRAINT "invoice_design_id_fkey" FOREIGN KEY ("id") REFERENCES "public"."sellers"("id");

ALTER TABLE ONLY "public"."invoice_design"
    ADD CONSTRAINT "invoice_design_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "public"."user"("id") ON UPDATE CASCADE;

ALTER TABLE ONLY "public"."invoice_products"
    ADD CONSTRAINT "invoice_products_invoicenumber_fkey" FOREIGN KEY ("invoicenumber") REFERENCES "public"."invoices"("invoicenumber");

ALTER TABLE ONLY "public"."invoice_products"
    ADD CONSTRAINT "invoice_products_product_id_fkey" FOREIGN KEY ("product_id") REFERENCES "public"."products"("id");

ALTER TABLE ONLY "public"."invoice_products"
    ADD CONSTRAINT "invoice_products_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "public"."user"("id") ON UPDATE CASCADE;

ALTER TABLE ONLY "public"."invoices"
    ADD CONSTRAINT "invoices_buyer_id_fkey" FOREIGN KEY ("buyer_id") REFERENCES "public"."buyers"("id");

ALTER TABLE ONLY "public"."invoices"
    ADD CONSTRAINT "invoices_currency_id_fkey" FOREIGN KEY ("currency_id") REFERENCES "public"."currencies"("id");

ALTER TABLE ONLY "public"."invoices"
    ADD CONSTRAINT "invoices_seller_id_fkey" FOREIGN KEY ("seller_id") REFERENCES "public"."sellers"("id");

ALTER TABLE ONLY "public"."invoices"
    ADD CONSTRAINT "invoices_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "public"."user"("id") ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE ONLY "public"."products"
    ADD CONSTRAINT "products_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "public"."user"("id") ON UPDATE CASCADE;

ALTER TABLE ONLY "public"."sellers"
    ADD CONSTRAINT "sellers_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "public"."user"("id") ON UPDATE CASCADE;

CREATE POLICY "Enable all actions for bank_details based on user_id" ON "public"."bank_details" TO "authenticated" USING (("auth"."uid"() = "user_id")) WITH CHECK (("auth"."uid"() = "user_id"));

CREATE POLICY "Enable all actions for invice_products based on user_id" ON "public"."invoice_products" TO "authenticated" USING (("auth"."uid"() = "user_id")) WITH CHECK (("auth"."uid"() = "user_id"));

CREATE POLICY "Enable all actions for invoice_design based on user_id" ON "public"."invoice_design" TO "authenticated" USING (("auth"."uid"() = "user_id")) WITH CHECK (("auth"."uid"() = "user_id"));

CREATE POLICY "Enable all actions for products based on user_id" ON "public"."products" TO "authenticated" USING (("auth"."uid"() = "user_id")) WITH CHECK (("auth"."uid"() = "user_id"));

CREATE POLICY "Enable all actions for sellers based on user_id" ON "public"."sellers" TO "authenticated" USING (("auth"."uid"() = "user_id")) WITH CHECK (("auth"."uid"() = "user_id"));

CREATE POLICY "Enable all actions for users based on user_id" ON "public"."buyers" TO "authenticated" USING (("auth"."uid"() = "user_id")) WITH CHECK (("auth"."uid"() = "user_id"));

CREATE POLICY "Enable all actions for users based on user_id" ON "public"."invoices" TO "authenticated" USING (("auth"."uid"() = "user_id")) WITH CHECK (("auth"."uid"() = "user_id"));

CREATE POLICY "Enable insert for authenticated users only" ON "public"."bank_details" FOR INSERT TO "authenticated" WITH CHECK (true);

CREATE POLICY "Enable insert for authenticated users only" ON "public"."buyers" FOR INSERT TO "authenticated" WITH CHECK (true);

CREATE POLICY "Enable insert for authenticated users only" ON "public"."invoice_design" FOR INSERT TO "authenticated" WITH CHECK (true);

CREATE POLICY "Enable insert for authenticated users only" ON "public"."invoice_products" FOR INSERT TO "authenticated" WITH CHECK (true);

CREATE POLICY "Enable insert for authenticated users only" ON "public"."invoices" FOR INSERT TO "authenticated" WITH CHECK (true);

CREATE POLICY "Enable insert for authenticated users only" ON "public"."products" FOR INSERT TO "authenticated" WITH CHECK (true);

CREATE POLICY "Enable read access for all users" ON "public"."currencies" FOR SELECT USING (true);

CREATE POLICY "Enable read of users based on user_id" ON "public"."user" FOR SELECT TO "authenticated" USING (("auth"."uid"() = "id"));

ALTER TABLE "public"."bank_details" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."buyers" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."currencies" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."invoice_design" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."invoice_products" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."invoices" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."products" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."sellers" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."user" ENABLE ROW LEVEL SECURITY;

REVOKE USAGE ON SCHEMA "public" FROM PUBLIC;
GRANT USAGE ON SCHEMA "public" TO "postgres";
GRANT USAGE ON SCHEMA "public" TO "anon";
GRANT USAGE ON SCHEMA "public" TO "authenticated";
GRANT USAGE ON SCHEMA "public" TO "service_role";

GRANT ALL ON FUNCTION "public"."create_user_on_signup"() TO "anon";
GRANT ALL ON FUNCTION "public"."create_user_on_signup"() TO "authenticated";
GRANT ALL ON FUNCTION "public"."create_user_on_signup"() TO "service_role";

GRANT ALL ON TABLE "public"."bank_details" TO "anon";
GRANT ALL ON TABLE "public"."bank_details" TO "authenticated";
GRANT ALL ON TABLE "public"."bank_details" TO "service_role";

GRANT ALL ON SEQUENCE "public"."bank_details_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."bank_details_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."bank_details_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."buyers" TO "anon";
GRANT ALL ON TABLE "public"."buyers" TO "authenticated";
GRANT ALL ON TABLE "public"."buyers" TO "service_role";

GRANT ALL ON SEQUENCE "public"."buyers_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."buyers_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."buyers_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."currencies" TO "anon";
GRANT ALL ON TABLE "public"."currencies" TO "authenticated";
GRANT ALL ON TABLE "public"."currencies" TO "service_role";

GRANT ALL ON SEQUENCE "public"."currencies_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."currencies_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."currencies_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."invoice_design" TO "anon";
GRANT ALL ON TABLE "public"."invoice_design" TO "authenticated";
GRANT ALL ON TABLE "public"."invoice_design" TO "service_role";

GRANT ALL ON SEQUENCE "public"."invoice_design_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."invoice_design_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."invoice_design_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."invoice_products" TO "anon";
GRANT ALL ON TABLE "public"."invoice_products" TO "authenticated";
GRANT ALL ON TABLE "public"."invoice_products" TO "service_role";

GRANT ALL ON SEQUENCE "public"."invoice_products_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."invoice_products_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."invoice_products_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."invoices" TO "anon";
GRANT ALL ON TABLE "public"."invoices" TO "authenticated";
GRANT ALL ON TABLE "public"."invoices" TO "service_role";

GRANT ALL ON TABLE "public"."products" TO "anon";
GRANT ALL ON TABLE "public"."products" TO "authenticated";
GRANT ALL ON TABLE "public"."products" TO "service_role";

GRANT ALL ON SEQUENCE "public"."products_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."products_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."products_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."sellers" TO "anon";
GRANT ALL ON TABLE "public"."sellers" TO "authenticated";
GRANT ALL ON TABLE "public"."sellers" TO "service_role";

GRANT ALL ON SEQUENCE "public"."sellers_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."sellers_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."sellers_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."user" TO "anon";
GRANT ALL ON TABLE "public"."user" TO "authenticated";
GRANT ALL ON TABLE "public"."user" TO "service_role";

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "service_role";

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "service_role";

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "service_role";

RESET ALL;
